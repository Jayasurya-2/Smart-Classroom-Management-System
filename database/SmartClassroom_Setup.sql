
CREATE USER smart_classroom IDENTIFIED BY StrongPassword123
DEFAULT TABLESPACE USERS 
TEMPORARY TABLESPACE TEMP 
QUOTA UNLIMITED ON USERS;

GRANT CONNECT, RESOURCE TO smart_classroom;
GRANT CREATE SESSION TO smart_classroom;
GRANT CREATE TABLE, CREATE VIEW, CREATE TRIGGER TO smart_classroom;
GRANT CREATE SEQUENCE, CREATE PROCEDURE TO smart_classroom;
GRANT UNLIMITED TABLESPACE TO smart_classroom;

CREATE TABLE USERS (
    NAME VARCHAR2(50),
    EMAIL VARCHAR2(50),
    PASSWORD VARCHAR2(50),
    ROLE VARCHAR2(20),
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'active',
    CONSTRAINT USERS_PK PRIMARY KEY (EMAIL),
    CONSTRAINT STATUS_CHECK CHECK (STATUS IN ('active', 'blocked', 'pending'))
);

CREATE TABLE STUDENTS (
    EMAIL VARCHAR2(100),
    NAME VARCHAR2(50),
    ROLE VARCHAR2(20),
    CREATED_AT TIMESTAMP,
    CONSTRAINT STUDENTS_PK PRIMARY KEY (EMAIL)
);

CREATE TABLE FACULTIES (
    EMAIL VARCHAR2(100),
    NAME VARCHAR2(50),
    ROLE VARCHAR2(20),
    CREATED_AT TIMESTAMP,
    CONSTRAINT FACULTIES_PK PRIMARY KEY (EMAIL)
);

CREATE TABLE COURSES (
    COURSE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    FACULTY_EMAIL VARCHAR2(100),
    COURSE_NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'active',
    CONSTRAINT COURSES_PK PRIMARY KEY (COURSE_ID),
    CONSTRAINT COURSE_STATUS_CHECK CHECK (STATUS IN ('active', 'inactive'))
);

CREATE TABLE MCQ_TESTS (
    TEST_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    COURSE_ID NUMBER NOT NULL,
    FACULTY_EMAIL VARCHAR2(100),
    TEST_NAME VARCHAR2(100) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SCHEDULE_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    CONSTRAINT MCQ_TESTS_PK PRIMARY KEY (TEST_ID),
    CONSTRAINT FK_MCQ_TESTS_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE MCQ_QUESTIONS (
    QUESTION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    TEST_ID NUMBER NOT NULL,
    QUESTION_TEXT VARCHAR2(500) NOT NULL,
    OPTION_A VARCHAR2(200) NOT NULL,
    OPTION_B VARCHAR2(200) NOT NULL,
    OPTION_C VARCHAR2(200) NOT NULL,
    OPTION_D VARCHAR2(200) NOT NULL,
    CORRECT_ANSWER CHAR(1),
    CONSTRAINT MCQ_QUESTIONS_PK PRIMARY KEY (QUESTION_ID),
    CONSTRAINT CORRECT_ANSWER_CHECK CHECK (CORRECT_ANSWER IN ('A', 'B', 'C', 'D')),
    CONSTRAINT FK_MCQ_QUESTIONS_TEST FOREIGN KEY (TEST_ID) REFERENCES MCQ_TESTS(TEST_ID)
);

CREATE TABLE MCQ_SUBMISSIONS (
    SUBMISSION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    TEST_ID NUMBER NOT NULL,
    STUDENT_EMAIL VARCHAR2(100),
    SCORE NUMBER,
    SUBMITTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ATTEMPTED NUMBER(1) DEFAULT 0,
    CONSTRAINT MCQ_SUBMISSIONS_PK PRIMARY KEY (SUBMISSION_ID),
    CONSTRAINT FK_SUBMISSIONS_TEST FOREIGN KEY (TEST_ID) REFERENCES MCQ_TESTS(TEST_ID)
);

CREATE TABLE RESULTS (
    RESULT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
    TEST_ID NUMBER NOT NULL,
    STUDENT_EMAIL VARCHAR2(100) NOT NULL,
    SCORE NUMBER NOT NULL,
    SUBMITTED_AT TIMESTAMP NOT NULL,
    CONSTRAINT RESULTS_PK PRIMARY KEY (RESULT_ID),
    CONSTRAINT FK_RESULTS_TEST FOREIGN KEY (TEST_ID) REFERENCES MCQ_TESTS(TEST_ID)
);

CREATE TABLE ENROLLMENT_REQUESTS (
    REQUEST_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    COURSE_ID NUMBER NOT NULL,
    STUDENT_EMAIL VARCHAR2(100),
    FACULTY_EMAIL VARCHAR2(100),
    REQUEST_STATUS VARCHAR2(20) DEFAULT 'PENDING',
    REQUESTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ENROLLMENT_REQ_PK PRIMARY KEY (REQUEST_ID),
    CONSTRAINT ENROLLMENT_STATUS_CHECK CHECK (REQUEST_STATUS IN ('PENDING', 'APPROVED', 'REJECTED')),
    CONSTRAINT FK_ENROLL_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE ENROLLMENTS (
    ENROLLMENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    COURSE_ID NUMBER NOT NULL,
    STUDENT_EMAIL VARCHAR2(100),
    ENROLLED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ENROLLMENTS_PK PRIMARY KEY (ENROLLMENT_ID),
    CONSTRAINT FK_ENROLL_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE COURSE_MATERIALS (
    MATERIAL_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    COURSE_ID NUMBER NOT NULL,
    TITLE VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    FILE_NAME VARCHAR2(255) NOT NULL,
    FILE_PATH VARCHAR2(500) NOT NULL,
    UPLOADED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT COURSE_MATERIALS_PK PRIMARY KEY (MATERIAL_ID),
    CONSTRAINT FK_MATERIALS_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

-- ============================
-- Trigger: TRG_INSERT_USER
-- Purpose: Auto-insert into STUDENTS or FACULTIES based on USER role
-- ============================

CREATE OR REPLACE TRIGGER TRG_INSERT_USER
AFTER INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.ROLE = 'Student' THEN
        INSERT INTO STUDENTS (EMAIL, NAME, ROLE, CREATED_AT)
        VALUES (:NEW.EMAIL, :NEW.NAME, :NEW.ROLE, :NEW.CREATED_AT);
    ELSIF :NEW.ROLE = 'Faculty' THEN
        INSERT INTO FACULTIES (EMAIL, NAME, ROLE, CREATED_AT)
        VALUES (:NEW.EMAIL, :NEW.NAME, :NEW.ROLE, :NEW.CREATED_AT);
    END IF;
END;
/

-- ============================
-- Trigger: TRG_MCQ_SUBMISSIONS_INSERT
-- Purpose: Auto-insert into RESULTS when a student submits test
-- ============================

CREATE OR REPLACE TRIGGER TRG_MCQ_SUBMISSIONS_INSERT
AFTER INSERT ON MCQ_SUBMISSIONS
FOR EACH ROW
BEGIN
    INSERT INTO RESULTS (TEST_ID, STUDENT_EMAIL, SCORE, SUBMITTED_AT)
    VALUES (:NEW.TEST_ID, :NEW.STUDENT_EMAIL, :NEW.SCORE, :NEW.SUBMITTED_AT);
END;
/

-- ============================
-- Trigger: TRG_MCQ_SUBMISSIONS_DELETE
-- Purpose: Auto-delete result if the related submission is deleted
-- ============================


CREATE OR REPLACE TRIGGER TRG_MCQ_SUBMISSIONS_DELETE
AFTER DELETE ON MCQ_SUBMISSIONS
FOR EACH ROW
BEGIN
    DELETE FROM RESULTS
    WHERE TEST_ID = :OLD.TEST_ID
    AND STUDENT_EMAIL = :OLD.STUDENT_EMAIL;
END;
/
